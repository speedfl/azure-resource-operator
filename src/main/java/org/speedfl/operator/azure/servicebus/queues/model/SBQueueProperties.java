/**
 * ServiceBusManagementClient
 * Azure Service Bus client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.speedfl.operator.azure.servicebus.queues.model;

import java.util.Date;

import org.speedfl.operator.azure.resources.resourcegroups.model.EntityStatus;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;


/**
  * The Queue Properties definition.
 **/


@Getter
@Setter
@EqualsAndHashCode
@ToString
@JsonInclude(Include.NON_NULL)
public class SBQueueProperties  {
  
  @JsonProperty("countDetails")
  private MessageCountDetails countDetails;

 /**
   * The exact time the message was created.
  **/
  @JsonProperty("createdAt")
  private Date createdAt;

 /**
   * The exact time the message was updated.
  **/
  @JsonProperty("updatedAt")
  private Date updatedAt;

 /**
   * Last time a message was sent, or the last time there was a receive request to this queue.
  **/
  @JsonProperty("accessedAt")
  private Date accessedAt;

 /**
   * The size of the queue, in bytes.
  **/
  @JsonProperty("sizeInBytes")
  private Long sizeInBytes;

 /**
   * The number of messages in the queue.
  **/
  @JsonProperty("messageCount")
  private Long messageCount;

 /**
   * ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
  **/
  @JsonProperty("lockDuration")
  private String lockDuration;

 /**
   * The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
  **/
  @JsonProperty("maxSizeInMegabytes")
  private Integer maxSizeInMegabytes;

 /**
   * A value indicating if this queue requires duplicate detection.
  **/
  @JsonProperty("requiresDuplicateDetection")
  private Boolean requiresDuplicateDetection;

 /**
   * A value that indicates whether the queue supports the concept of sessions.
  **/
  @JsonProperty("requiresSession")
  private Boolean requiresSession;

 /**
   * ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
  **/
  @JsonProperty("defaultMessageTimeToLive")
  private String defaultMessageTimeToLive;

 /**
   * A value that indicates whether this queue has dead letter support when a message expires.
  **/
  @JsonProperty("deadLetteringOnMessageExpiration")
  private Boolean deadLetteringOnMessageExpiration;

 /**
   * ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
  **/
  @JsonProperty("duplicateDetectionHistoryTimeWindow")
  private String duplicateDetectionHistoryTimeWindow;

 /**
   * The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
  **/
  @JsonProperty("maxDeliveryCount")
  private Integer maxDeliveryCount;

  @JsonProperty("status")
  private EntityStatus status;

 /**
   * Value that indicates whether server-side batched operations are enabled.
  **/
  @JsonProperty("enableBatchedOperations")
  private Boolean enableBatchedOperations;

 /**
   * ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
  **/
  @JsonProperty("autoDeleteOnIdle")
  private String autoDeleteOnIdle;

 /**
   * A value that indicates whether the queue is to be partitioned across multiple message brokers.
  **/
  @JsonProperty("enablePartitioning")
  private Boolean enablePartitioning;

 /**
   * A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
  **/
  @JsonProperty("enableExpress")
  private Boolean enableExpress;

 /**
   * Queue/Topic name to forward the messages
  **/
  @JsonProperty("forwardTo")
  private String forwardTo;

 /**
   * Queue/Topic name to forward the Dead Letter message
  **/
  @JsonProperty("forwardDeadLetteredMessagesTo")
  private String forwardDeadLetteredMessagesTo;
}

