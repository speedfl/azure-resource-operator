/**
 * ResourceManagementClient
 * Provides operations for working with resources and resource groups.
 *
 * The version of the OpenAPI document: 2021-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.speedfl.operator.azure.resources.resourcegroups.api;

import java.time.temporal.ChronoUnit;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.HEAD;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.ProcessingException;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;

import org.eclipse.microprofile.faulttolerance.Retry;
import org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders;
import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.annotation.RegisterProviders;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;
import org.speedfl.operator.azure.common.auth.AuthHeaderFactory;
import org.speedfl.operator.azure.common.error.ApiException;
import org.speedfl.operator.azure.common.error.ApiExceptionMapper;
import org.speedfl.operator.azure.common.error.TooManyRequestExeption;
import org.speedfl.operator.azure.common.error.TooManyRequestExeptionMapper;
import org.speedfl.operator.azure.resources.resourcegroups.model.ResourceGroup;

/**
 * ResourceManagementClient
 *
 * <p>Provides operations for working with resources and resource groups.
 *
 */

@Retry(retryOn = TooManyRequestExeption.class, delay = 1, delayUnit = ChronoUnit.SECONDS, maxRetries = 5)
@RegisterRestClient(configKey="azure-api")
@RegisterClientHeaders(AuthHeaderFactory.class)
@RegisterProviders({
  @RegisterProvider(APIVersionProvider.class),
  @RegisterProvider(ApiExceptionMapper.class),
  @RegisterProvider(TooManyRequestExeptionMapper.class),
})
@Path("/subscriptions/{subscriptionId}")
public interface ResourceGroupsApi  {

    @HEAD
    @Path("/resourcegroups/{resourceGroupName}")
    @Produces({ "application/json" })
    public void resourceGroupsCheckExistence(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("subscriptionId") String subscriptionId) throws ApiException, ProcessingException;

    @PUT
    @Path("/resourcegroups/{resourceGroupName}")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public ResourceGroup resourceGroupsCreateOrUpdate(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("subscriptionId") String subscriptionId, ResourceGroup parameters) throws ApiException, ProcessingException;

    /**
     * Deletes a resource group.
     *
     * When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations.
     *
     */
    @DELETE
    @Path("/resourcegroups/{resourceGroupName}")
    @Produces({ "application/json" })
    public void resourceGroupsDelete(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("forceDeletionTypes") String forceDeletionTypes) throws ApiException, ProcessingException;

    @GET
    @Path("/resourcegroups/{resourceGroupName}")
    @Produces({ "application/json" })
    public ResourceGroup resourceGroupsGet(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("subscriptionId") String subscriptionId) throws ApiException, ProcessingException;

}

